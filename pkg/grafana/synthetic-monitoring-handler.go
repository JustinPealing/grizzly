package grafana

import (
	"github.com/grafana/grizzly/pkg/grizzly"
	"github.com/grafana/grizzly/pkg/manifests"
	"github.com/grafana/tanka/pkg/kubernetes/manifest"
)

/*
 * @TODO
 * 1. The API does not have a GET method, so we have to fake it here
 * 2. The API expects an ID and a tenantId in an update, but these are
 *    generated by the server so cannot be represented in Jsonnet.
 *    Therefore, we have to pre-retrieve the check to get those values
 *    so we can inject them before posting JSON.
 * 3. This means pre-retrieving the check *twice*, once to establish
 *    whether this resource has changed or not (within Grizzly ifself)
 *    and again within this provider to retrieve IDs. Not ideal.
 */

// SyntheticMonitoringHandler is a Grizzly Handler for Grafana Synthetic Monitoring
type SyntheticMonitoringHandler struct {
	Provider Provider
}

// NewSyntheticMonitoringHandler returns a Grizzly Handler for Grafana Synthetic Monitoring
func NewSyntheticMonitoringHandler(provider Provider) *SyntheticMonitoringHandler {
	return &SyntheticMonitoringHandler{
		Provider: provider,
	}
}

// Kind returns the name for this handler
func (h *SyntheticMonitoringHandler) Kind() string {
	return "SyntheticMonitoringCheck"
}

// APIVersion returns the group and version for the provider of which this handler is a part
func (h *SyntheticMonitoringHandler) APIVersion() string {
	return h.Provider.APIVersion()
}

const syntheticMonitoringChecksPath = "syntheticMonitoring"

// GetJSONPaths returns paths within Jsonnet output that this provider will consume
func (h *SyntheticMonitoringHandler) GetJSONPaths() []string {
	return []string{
		syntheticMonitoringChecksPath,
	}
}

// GetExtension returns the file name extension for a check
func (h *SyntheticMonitoringHandler) GetExtension() string {
	return "json"
}

func (h *SyntheticMonitoringHandler) newCheckResource(m manifest.Manifest) grizzly.Resource {
	resource := grizzly.Resource{
		UID:     m.Metadata().Name(),
		Handler: h,
		Detail:  m,
	}
	return resource
}

// GetRemoteByUID retrieves a dashboard as a resource
func (h *SyntheticMonitoringHandler) GetRemoteByUID(uid string) (*grizzly.Resource, error) {
	m, err := getRemoteCheck(uid)
	if err != nil {
		return nil, err
	}
	return grizzly.NewResource(*m, h), nil
}

// GetRemote retrieves a dashboard as a resource
func (h *SyntheticMonitoringHandler) GetRemote(existing grizzly.Resource) (*grizzly.Resource, error) {
	return h.GetRemoteByUID(h.uid(existing))
}

func (h *SyntheticMonitoringHandler) uid(resource grizzly.Resource) string {
	return manifests.JoinUID(
		manifests.GetMetadata(&resource.Detail, "type"),
		resource.Detail.Metadata().Name(),
	)
}

// Add adds a new check to the SyntheticMonitoring endpoint
func (h *SyntheticMonitoringHandler) Add(resource grizzly.Resource) error {
	url := getSyntheticMonitoringURL("api/v1/check/add")
	return postCheck(url, resource.Detail)
}

// Update pushes an updated check to the SyntheticMonitoring endpoing
func (h *SyntheticMonitoringHandler) Update(existing, resource grizzly.Resource) error {
	url := getSyntheticMonitoringURL("api/v1/check/update")
	rawExisting, err := getRemoteCheckRaw(h.uid(existing))
	if err != nil {
		return err
	}
	tenantID := manifests.GetSpecField(rawExisting, "tenantId")
	id := manifests.GetSpecField(rawExisting, "id")
	resource.Detail = *manifests.SetSpecField(&resource.Detail, "id", id)
	resource.Detail = *manifests.SetSpecField(&resource.Detail, "tenantId", tenantID)
	return postCheck(url, resource.Detail)
}
