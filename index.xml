<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grizzly: Deploy and Observe as One on Grizzly Docs</title><link>https://grafana.github.io/grizzly/</link><description>Recent content in Grizzly: Deploy and Observe as One on Grizzly Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://grafana.github.io/grizzly/index.xml" rel="self" type="application/rss+xml"/><item><title>Available Systems</title><link>https://grafana.github.io/grizzly/systems/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/systems/</guid><description>Typical observability systems are commonly composed of multiple systems. Resources need to be configured across these systems.
Grizzly is currently able to manage these resources:
System Resource Grafana Dashboard Grafana Folder Grafana Datasource Prometheus Alerting rule Prometheus Recording rule Synthetic Monitoring Check</description></item><item><title>Getting Started</title><link>https://grafana.github.io/grizzly/getting-started/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/getting-started/</guid><description>Authentication and Configuration Each system handles authentication differently. Authentication must be configured if resources are provided for a system.
Grafana Itself This tool interacts with Grafana via its REST API. For this, you will need to establish authentication credentials. These are provided to grr via environment variables.
Name Description Required Default GRAFANA_URL Fully qualified domain name of your Grafana instance. true - GRAFANA_USER Basic auth username if applicable.</description></item><item><title>Installation</title><link>https://grafana.github.io/grizzly/installation/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/installation/</guid><description>Grizzly is currently available for Linux and MacOS systems.
Download the latest release
Select an appropriate file for your operating system.
If you wish to build the latest (as yet unreleased) version, assuming you have a recent Golang installed:
GO111MODULE=on go get -u github.com/grafana/grizzly/cmd/grr</description></item><item><title>The Future</title><link>https://grafana.github.io/grizzly/future/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/future/</guid><description>Grizzly is only the beginning.
At Grafana Labs we are exploring how &amp;ldquo;as code&amp;rdquo; solutions can help users deploy their observability alongside the deployment of their applications.
There&amp;rsquo;s more to come.</description></item><item><title>Usage</title><link>https://grafana.github.io/grizzly/usage/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/usage/</guid><description>Commands grr get Retrieves a resource from the remote system, via its UID. Its UID will be two parts separated by a dot, &amp;lt;resource-type&amp;gt;.&amp;lt;resource-id&amp;gt;. A dashboard might be dashboard.mydash:
$ grr get Dashboard.my-uid grr list List all resources found after executing Jsonnet file.
$ grr list my-lib.libsonnet grr show Shows the resources found after executing Jsonnet, rendered as expected for each resource type:
$ grr show my-lib.libsonnet grr diff Compares each resource rendered by Jsonnet with the equivalent on the remote system:</description></item><item><title>What is Grizzly?</title><link>https://grafana.github.io/grizzly/what-is-grizzly/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/what-is-grizzly/</guid><description>Grizzly is a command line tool that allows you to manage your observability resources with code.
Now you can define your dashboards, alerting and recording rules, etc, all from within your codebase.
You can build Grizzly into your continuous deployment pipelines, meaning whenever you deploy your application, your observability is updated too.</description></item><item><title>Workflows</title><link>https://grafana.github.io/grizzly/workflows/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://grafana.github.io/grizzly/workflows/</guid><description>Grizzly is a flexible tool that supports a number of workflows.
Jsonnet The principal workflow for Grizzly involves Jsonnet.
With this workflow, resources are described in Jsonnet. When Grizzly is invoked, it evaluates the Jsonnet and renders the resources into JSON/YAML. This it can then push to the relevant systems.
This is a unidirectional process. It doesn&amp;rsquo;t make sense to pull Jsonnet from a remote system.
Pull/Push Sometimes we want to migrate resources between systems - e.</description></item></channel></rss>